openapi: 3.0.3
info:
  title: CORTX Identity Service API
  description: Authentication and identity management service for the CORTX platform
  version: 1.0.0
  contact:
    name: CORTX Platform Team
    email: platform@cortx.ai
servers:
- url: http://localhost:8120
  description: Development server
security:
- BearerAuth: []
paths:
  /health:
    get:
      tags:
      - Health
      summary: Health check endpoint
      description: Check service health status
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'
  /v1/auth/login:
    post:
      tags:
      - Authentication
      summary: User login
      description: Authenticate user and return JWT token
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/auth/verify:
    get:
      tags:
      - Authentication
      summary: Verify JWT token
      description: Verify the validity of a JWT token
      responses:
        '200':
          description: Token is valid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenVerifyResponse'
        '401':
          description: Invalid or expired token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/users:
    get:
      tags:
      - Users
      summary: List users
      description: Get paginated list of users (admin only)
      parameters:
      - name: page
        in: query
        schema:
          type: integer
          minimum: 1
          default: 1
      - name: size
        in: query
        schema:
          type: integer
          minimum: 1
          maximum: 100
          default: 10
      responses:
        '200':
          description: Users retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersListResponse'
        '403':
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
      - Users
      summary: Create user
      description: Create new user account (admin only)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/users/{user_id}:
    get:
      tags:
      - Users
      summary: Get user details
      description: Get user by ID (admin or own profile)
      parameters:
      - name: user_id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '200':
          description: User details retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    HealthResponse:
      type: object
      properties:
        status:
          type: string
          example: healthy
        timestamp:
          type: string
          format: date-time
        service:
          type: string
          example: identity
        version:
          type: string
          example: 1.0.0
    LoginRequest:
      type: object
      required:
      - username
      - password
      properties:
        username:
          type: string
          example: admin
        password:
          type: string
          example: password
    LoginResponse:
      type: object
      properties:
        access_token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        token_type:
          type: string
          example: bearer
        user:
          $ref: '#/components/schemas/User'
    TokenVerifyResponse:
      type: object
      properties:
        valid:
          type: boolean
          example: true
        user:
          $ref: '#/components/schemas/User'
    CreateUserRequest:
      type: object
      required:
      - username
      - email
      - password
      properties:
        username:
          type: string
          example: newuser
        email:
          type: string
          format: email
          example: user@example.com
        password:
          type: string
          minLength: 6
          example: securepassword
        roles:
          type: array
          items:
            type: string
            enum:
            - admin
            - user
          default:
          - user
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        username:
          type: string
        email:
          type: string
          format: email
        roles:
          type: array
          items:
            type: string
        is_active:
          type: boolean
        created_at:
          type: string
          format: date-time
        last_login:
          type: string
          format: date-time
          nullable: true
    UserResponse:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User'
    UsersListResponse:
      type: object
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/User'
        total:
          type: integer
        page:
          type: integer
        size:
          type: integer
        pages:
          type: integer
    ErrorResponse:
      type: object
      properties:
        detail:
          type: string
          example: Invalid credentials
