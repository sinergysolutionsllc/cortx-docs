name: Test All CORTX Services

on:
  push:
    branches: [main]
    paths:
    - services/**
    - .github/workflows/test-*.yml
  pull_request:
    branches: [main]
    paths:
    - services/**
    - .github/workflows/test-*.yml
  schedule:
    # Run daily at 6 AM UTC
  - cron: 0 6 * * *
  workflow_dispatch:
    # Allow manual triggering

jobs:
  # Run all service tests in parallel
  test-services:
    strategy:
      fail-fast: false
      matrix:
        service:
        - ai-broker
        - compliance
        - gateway
        - identity
        - ledger
        - ocr
        - rag
        - validation
        - workflow

    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: services/${{ matrix.service }}

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: pip
        cache-dependency-path: |
          services/${{ matrix.service }}/requirements.txt
          services/${{ matrix.service }}/requirements-dev.txt

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi

    - name: Run linting with ruff
      run: |
        ruff check app/ tests/ --config pyproject.toml || true

    - name: Run type checking with mypy
      run: |
        mypy app/ --config-file pyproject.toml || true
      continue-on-error: true

    - name: Run tests with pytest
      run: |
        pytest tests/ \
          --cov=app \
          --cov-report=term-missing \
          --cov-report=xml \
          --cov-report=html \
          --cov-fail-under=80 \
          -v

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ./services/${{ matrix.service }}/coverage.xml
        flags: ${{ matrix.service }}
        name: ${{ matrix.service }}-coverage
        fail_ci_if_error: false

    - name: Upload coverage artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: ${{ matrix.service }}-coverage
        path: |
          services/${{ matrix.service }}/coverage.xml
          services/${{ matrix.service }}/htmlcov/
        retention-days: 30

    - name: Generate coverage summary
      id: coverage
      if: always()
      run: |
        echo "service=${{ matrix.service }}" >> $GITHUB_OUTPUT
        COVERAGE=$(coverage report | grep TOTAL | awk '{print $NF}' | sed 's/%//')
        echo "coverage=$COVERAGE" >> $GITHUB_OUTPUT
        echo "${{ matrix.service }} coverage: $COVERAGE%"

  # Aggregate results and create summary
  aggregate-results:
    needs: test-services
    runs-on: ubuntu-latest
    if: always()

    steps:
    - uses: actions/checkout@v4

    - name: Download all coverage artifacts
      uses: actions/download-artifact@v4
      with:
        path: coverage-reports

    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install coverage tools
      run: |
        pip install coverage pytest-cov

    - name: Generate aggregated coverage report
      run: |
        echo "# CORTX Platform Test Coverage Report" > coverage-summary.md
        echo "" >> coverage-summary.md
        echo "Generated on: $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> coverage-summary.md
        echo "" >> coverage-summary.md
        echo "## Service Coverage Summary" >> coverage-summary.md
        echo "" >> coverage-summary.md
        echo "| Service | Coverage | Status |" >> coverage-summary.md
        echo "|---------|----------|--------|" >> coverage-summary.md

        TOTAL_COVERAGE=0
        SERVICE_COUNT=0

        for service in ai-broker compliance gateway identity ledger ocr rag validation workflow; do
          if [ -f "coverage-reports/${service}-coverage/coverage.xml" ]; then
            # Extract coverage percentage from XML
            COVERAGE=$(grep -oP 'line-rate="\K[0-9.]+' coverage-reports/${service}-coverage/coverage.xml | head -1)
            COVERAGE_PERCENT=$(echo "$COVERAGE * 100" | bc | cut -d. -f1)

            if [ "$COVERAGE_PERCENT" -ge 80 ]; then
              STATUS="✅ Pass"
            else
              STATUS="❌ Below Threshold"
            fi

            echo "| $service | ${COVERAGE_PERCENT}% | $STATUS |" >> coverage-summary.md
            TOTAL_COVERAGE=$((TOTAL_COVERAGE + COVERAGE_PERCENT))
            SERVICE_COUNT=$((SERVICE_COUNT + 1))
          else
            echo "| $service | N/A | ⚠️ No Report |" >> coverage-summary.md
          fi
        done

        if [ $SERVICE_COUNT -gt 0 ]; then
          AVERAGE_COVERAGE=$((TOTAL_COVERAGE / SERVICE_COUNT))
          echo "" >> coverage-summary.md
          echo "## Overall Platform Coverage" >> coverage-summary.md
          echo "" >> coverage-summary.md
          echo "- **Average Coverage**: ${AVERAGE_COVERAGE}%" >> coverage-summary.md
          echo "- **Target Coverage**: 80%" >> coverage-summary.md

          if [ $AVERAGE_COVERAGE -ge 80 ]; then
            echo "- **Status**: ✅ Platform meets quality threshold" >> coverage-summary.md
          else
            echo "- **Status**: ⚠️ Platform below quality threshold" >> coverage-summary.md
          fi
        fi

        echo "" >> coverage-summary.md
        echo "## Test Execution Details" >> coverage-summary.md
        echo "" >> coverage-summary.md
        echo "- **Python Version**: 3.11" >> coverage-summary.md
        echo "- **Test Framework**: pytest" >> coverage-summary.md
        echo "- **Coverage Tool**: pytest-cov" >> coverage-summary.md
        echo "- **Quality Gate**: 80% minimum coverage" >> coverage-summary.md

        cat coverage-summary.md

    - name: Upload aggregated coverage report
      uses: actions/upload-artifact@v4
      with:
        name: platform-coverage-summary
        path: coverage-summary.md
        retention-days: 90

    - name: Comment PR with coverage summary
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs');
          const summary = fs.readFileSync('coverage-summary.md', 'utf8');

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: summary
          });

    - name: Create GitHub Step Summary
      if: always()
      run: |
        cat coverage-summary.md >> $GITHUB_STEP_SUMMARY

  # Final quality gate check
  quality-gate:
    needs: test-services
    runs-on: ubuntu-latest
    if: always()

    steps:
    - name: Check all services passed
      run: |
        if [ "${{ needs.test-services.result }}" != "success" ]; then
          echo "❌ One or more service tests failed"
          exit 1
        else
          echo "✅ All service tests passed"
        fi
